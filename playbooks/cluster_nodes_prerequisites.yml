---
- name: Configure Servers
  hosts: "worker_nodes,master_nodes"
  gather_facts: true
  become: true
  vars:
    docker_version: "23.0.6"
    install_docker: true
    docker: true
    network_plugin: canal
    rke_version: rke1
    load_balancer: metallb
    package_manager: "{{ 'apt' if ansible_os_family == 'Debian' else 'yum' }}"
  tasks:
    ####################### Determine the os ###########################

    - name: Get the contents of /etc/os-release
      shell: cat /etc/os-release
      register: os_release

    - name: Determine distribution
      set_fact:
        distribution: |
          {%- if "'Red Hat'" in os_release.stdout -%}
          RHEL
          {%- elif "'CentOS'" in os_release.stdout -%}
          CentOS
          {%- else -%}
          Unknown
          {%- endif -%}
    - name: Debug distribution
      debug:
        var: distribution

    ####################### Kubernates Prequesites ###########################

    - name: Turn off swap
      shell: swapoff -a
    - name: Create sysctl directory
      file:
        path: /etc/sysctl.d
        state: directory
        mode: '0755'
    - name: Create Kubernetes sysctl configuration file
      file:
        path: /etc/sysctl.d/kubernetes.conf
        state: touch
        mode: '0644'
    - name: Configure Kernel Parameters
      lineinfile:
        dest: /etc/sysctl.d/kubernetes.conf
        line: "{{ item }}"
      with_items:
        - "net.bridge.bridge-nf-call-ip6tables = 1"
        - "net.bridge.bridge-nf-call-iptables = 1"
    - name: Apply Kernel Parameters
      shell: sysctl --system

    ####################### Installing Docker REDHAT ###########################
    - name: Update package cache (Red Hat)
      command: sudo yum -y update
      when: package_manager == 'yum'

    - name: Download the Docker installation script (Red Hat)
      get_url:
        url: "https://get.docker.com/"
        dest: "/tmp/install_docker.sh"
        mode: "0755"
      when: install_docker and package_manager == 'yum' and distribution == 'CentOS'

    - name: Execute the Docker installation script (Red Hat)
      command: "/tmp/install_docker.sh"
      register: docker_script_output
      async: 600
      when: install_docker and package_manager == 'yum' and distribution == 'CentOS'

    - name: Add user to the docker group (Red Hat)
      user:
        name: "{{ ansible_user }}"
        groups: docker
        append: true
        state: present
      when: install_docker and package_manager == 'yum'

    ####################### Installing Docker (Debian) ###########################
    - name: Download the compatibility script (Debian)
      get_url:
        url: "https://releases.rancher.com/install-docker/{{ docker_version }}.sh"
        dest: "/tmp/compatibility_script.sh"
        mode: "0755"
      when: install_docker and package_manager == 'apt'

    - name: Execute the compatibility script (Debian)
      command: "/tmp/compatibility_script.sh"
      register: compatibility_script_output
      async: 600
      when: install_docker and package_manager == 'apt'

    - name: Add user to the docker group (Debian)
      user:
        name: "{{ ansible_user }}"
        groups: docker
        append: true
        state: present
      when: install_docker and package_manager == 'apt'

  ####################### Installing Docker ###########################
    - name: Install UFW package
      package:
        name: ufw
        state: present
      when: package_manager == 'apt' # For Ubuntu
    - name: Install firewalld package
      package:
        name: firewalld
        state: present
      when: package_manager == 'yum' # For Red Hat
    - name: Ensure Firewalld is started and enabled
      systemd:
        name: firewalld
        state: started
        enabled: yes
      when: package_manager == 'yum' # For Red Hat
    ####################### network for both master and worker nodes #######################
    - name: Set logging
      ufw:
        logging: 'on'
      when: package_manager == 'apt' # For Ubuntu
    - name: Allow Kubelet API Port (Port 10250)
      ufw:
        rule: allow
        port: 10250
        proto: tcp
      when: package_manager == 'apt' # For Ubuntu
    - name: Allow Kubelet API Port (Port 10250)
      firewalld:
        port: 10250/tcp
        permanent: yes
        state: enabled
      when: package_manager == 'yum' # For Red Hat
    - name: Allow SSH (Port 22)
      ufw:
        rule: allow
        port: 22
        proto: tcp
      when: package_manager == 'apt' # For Ubuntu
    - name: Allow SSH (Port 22)
      firewalld:
        service: ssh
        permanent: yes
        state: enabled
      when: package_manager == 'yum' # For Red Hat
    ####################### LOAD BALANCER CONFIGURATION PORTS #######################
    - name: Allow TCP speakers for MetalLB
      ufw:
        rule: allow
        port: "{{ item }}"
        proto: tcp
      loop:
        - 7946
      when: load_balancer == "metallb" and package_manager == 'apt' # For Ubuntu
    - name: Allow TCP speakers for MetalLB
      firewalld:
        port: "{{ item }}/tcp"
        permanent: yes
        state: enabled
      loop:
        - 7946
      when: load_balancer == "metallb" and package_manager == 'yum' # For Red Hat
    - name: Allow UDP speakers for MetalLB
      ufw:
        rule: allow
        port: "{{ item }}"
        proto: "udp"
      loop:
        - 7946
      when: load_balancer == "metallb" and package_manager == 'apt' # For Ubuntu
    - name: Allow UDP speakers for MetalLB
      firewalld:
        port: "{{ item }}/udp"
        permanent: yes
        state: enabled
      loop:
        - 7946
      when: load_balancer == "metallb" and package_manager == 'yum' # For Red Hat
    ####################### Canal Network Plugin #######################
    - name: Allow Canal Network Plugin Port TCP
      ufw:
        rule: allow
        port: "{{ item }}"
        proto: tcp
      loop:
        - 8472
      when: network_plugin == "canal" and package_manager == 'apt' # For Ubuntu
    - name: Allow Canal Network Plugin Port TCP
      firewalld:
        port: "{{ item }}/tcp"
        permanent: yes
        state: enabled
      loop:
        - 8472
      when: network_plugin == "canal"  and package_manager == 'yum' # For Red Hat
    - name: Allow Canal Network Plugin Port UDP
      ufw:
        rule: allow
        port: "{{ item }}"
        proto: udp
      loop:
        - 8472
      when: network_plugin == "canal" and package_manager == 'apt' # For Ubuntu
    - name: Allow Canal Network Plugin Port UDP
      firewalld:
        port: "{{ item }}/udp"
        permanent: yes
        state: enabled
      loop:
        - 8472
      when: network_plugin == "canal" and package_manager == 'yum' # For Red Hat
    - name: Allow Canal livenessProbe/readinessProbe
      ufw:
        rule: allow
        port: 9099
        proto: tcp
      when: network_plugin == "canal" and package_manager == 'apt' # For Ubuntu
    - name: Allow Canal livenessProbe/readinessProbe
      firewalld:
        port: 9099/tcp
        permanent: yes
        state: enabled
      when: network_plugin == "canal" and package_manager == 'yum' # For Red Hat
    - name: Allow Canal Network Plugin Wireguard Port UDP
      ufw:
        rule: allow
        port: "{{ item }}"
        proto: udp
      loop:
        - 51820
        - 51821
      when: network_plugin == "canal" and package_manager == 'apt' # For Ubuntu
    - name: Allow Canal Network Plugin Wireguard Port UDP
      firewalld:
        port: "{{ item }}/udp"
        permanent: yes
        state: enabled
      loop:
        - 51820
        - 51821
      when: network_plugin == "canal" and package_manager == 'yum' # For Red Hat
    ####################### Weave Network Plugin #######################
    - name: Allow Weave Network Plugin Ports
      ufw:
        rule: allow
        port: "{{ item }}"
        proto: tcp
      loop:
        - 6783
      when: network_plugin == "weave" and package_manager == 'apt' # For Ubuntu
    - name: Allow Weave Network Plugin Ports
      firewalld:
        port: "{{ item }}/tcp"
        permanent: yes
        state: enabled
      loop:
        - 6783
      when: network_plugin == "weave" and package_manager == 'yum' # For Red Hat
    - name: Allow Weave Network Plugin UDP Ports
      ufw:
        rule: allow
        port: "{{ item }}"
        proto: udp
      loop:
        - 6783
        - 6784
      when: network_plugin == "weave" and package_manager == 'apt' # For Ubuntu
    - name: Allow Weave Network Plugin UDP Ports
      firewalld:
        port: "{{ item }}/udp"
        permanent: yes
        state: enabled
      loop:
        - 6783
        - 6784
      when: network_plugin == "weave" and package_manager == 'yum' # For Red Hat
    ####################### Calico Network Plugin #######################
    - name: Allow Calico Network Plugin Ports
      ufw:
        rule: allow
        port: "{{ item }}"
        proto: tcp
      loop:
        - 179
      when: network_plugin == "calico" and package_manager == 'apt' # For Ubuntu
    - name: Allow Calico Network Plugin Ports
      firewalld:
        port: "{{ item }}/tcp"
        permanent: yes
        state: enabled
      loop:
        - 179
      when: network_plugin == "calico" and package_manager == 'yum' # For Red Hat
    - name: Allow Calico Network Plugin Ports (VXLAN)
      ufw:
        rule: allow
        port: "{{ item }}"
        proto: udp
      loop:
        - 4789
      when: network_plugin == "calico" and package_manager == 'apt' # For Ubuntu
    - name: Allow Calico Network Plugin Ports (VXLAN)
      firewalld:
        port: "{{ item }}/udp"
        permanent: yes
        state: enabled
      loop:
        - 4789
      when: network_plugin == "calico" and package_manager == 'yum' # For Red Hat
    - name: Allow Calico Network Plugin Port for Typha
      ufw:
        rule: allow
        port: 5473
        proto: tcp
      when: network_plugin == "calico" and package_manager == 'apt' # For Ubuntu
    - name: Allow Calico Network Plugin Port for Typha
      firewalld:
        port: 5473/tcp
        permanent: yes
        state: enabled
      when: network_plugin == "calico" and package_manager == 'yum' # For Red Hat
    ####################### Cilium Network Plugin #######################
    - name: Allow Cilium Network Plugin Ports
      ufw:
        rule: allow
        port: "{{ item }}"
        proto: tcp
      loop:
        - 8472
        - 4240
      when: network_plugin == "cilium" and package_manager == 'apt' # For Ubuntu
    - name: Allow Cilium Network Plugin Ports
      firewalld:
        port: "{{ item }}/tcp"
        permanent: yes
        state: enabled
      loop:
        - 8472
        - 4240
      when: network_plugin == "cilium" and package_manager == 'yum' # For Red Hat
    - name: Allow ICMP Echo Requests (Ping) for Health Checks
      ufw:
        rule: allow
        proto: icmp
        icmp_type: 8
        state: NEW
      when: network_plugin == "cilium" and package_manager == 'apt' # For Ubuntu
    - name: Allow ICMP Echo Requests (Ping) for Health Checks
      firewalld:
        icmp_block_inversion: yes
        icmp_block: yes
        permanent: yes
        state: enabled
      when: network_plugin == "cilium" and package_manager == 'yum' # For Red Hat
    ####################### Flannel Network Plugin #######################
    - name: Allow Flannel Network Plugin VXLAN Port on Kubernetes Worker Nodes
      ufw:
        rule: allow
        port: 8472
        proto: udp
      when: network_plugin == "flannel" and package_manager == 'apt' # For Ubuntu
    - name: Allow Flannel Network Plugin VXLAN Port on Kubernetes Worker Nodes
      firewalld:
        port: 8472/udp
        permanent: yes
        state: enabled
      when: network_plugin == "flannel" and package_manager == 'yum' # For Red Hat
    ####################### Nginx ingress Network Plugin #######################
    - name: Allow Nginx Ingress's Validating Webhook
      ufw:
        rule: allow
        port: 8443
        proto: tcp
      when: package_manager == 'apt' # For Ubuntu
    - name: Allow Nginx Ingress's Validating Webhook
      firewalld:
        port: 8443/tcp
        permanent: yes
        state: enabled
      when: package_manager == 'yum' # For Red Hat
    - name: Allow HTTP (Port 80 TCP)
      ufw:
        rule: allow
        port: 80
        proto: tcp
      when: package_manager == 'apt' # For Ubuntu
    - name: Allow HTTP (Port 80 TCP)
      firewalld:
        port: 80/tcp
        permanent: yes
        state: enabled
      when: package_manager == 'yum' # For Red Hat
    - name: Allow HTTPS (Port 443 TCP)
      ufw:
        rule: allow
        port: 443
        proto: tcp
      when: package_manager == 'apt' # For Ubuntu
    - name: Allow HTTPS (Port 443 TCP)
      firewalld:
        port: 443/tcp
        permanent: yes
        state: enabled
      when: package_manager == 'yum' # For Red Hat
    ####################### ENABLE FIREWALL FOR ALL NODES #######################
    - name: Enable UFW
      ufw:
        state: enabled
      when: package_manager == 'apt' # For Ubuntu
    - name: Enable Firewalld
      firewalld:
        state: enabled
      when: package_manager == 'yum' # For Red Hat
    - name: Reload firewall
      command: firewall-cmd --reload
      when: package_manager == 'yum' # For Red Hat
    ####################### Disable nm-cloud-setup.service #######################
    - name: Disable nm-cloud-setup.service
      systemd:
        name: nm-cloud-setup.service
        enabled: no
      when: ansible_os_family == 'RedHat'
