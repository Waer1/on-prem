---
- name: Configure Servers
  hosts: external_vms
  gather_facts: true
  become: true

  vars:
    docker_version: "23.0.6"

  tasks:

    - name: Turn off swap
      shell: swapoff -a

    - name: Create sysctl directory
      file:
        path: /etc/sysctl.d
        state: directory
        mode: '0755'

    - name: Create Kubernetes sysctl configuration file
      file:
        path: /etc/sysctl.d/kubernetes.conf
        state: touch
        mode: '0644'

    - name: Configure Kernel Parameters
      lineinfile:
        dest: /etc/sysctl.d/kubernetes.conf
        line: "{{ item }}"
      with_items:
        - "net.bridge.bridge-nf-call-ip6tables = 1"
        - "net.bridge.bridge-nf-call-iptables = 1"

    - name: Apply Kernel Parameters
      shell: sysctl --system


  # Install docker engine


    - name: Download the compatibility script
      get_url:
        url: "https://releases.rancher.com/install-docker/{{docker_version}}.sh"
        dest: "/tmp/compatibility_script.sh"
        mode: "0755"

    - name: Execute the script
      command: "/tmp/compatibility_script.sh"
      register: script_output

    - name: Wait for the script to complete
      async_status:
        jid: "{{ script_output.ansible_job_id }}"
      register: job_result
      until: job_result.finished
      retries: 600
      delay: 10

    - name: Display script output
      debug:
        var: job_result.result.stdout_lines

    - name: Add user to the docker group
      user:
        name: "{{ ansible_user }}"
        groups: docker
        append: true
        state: present

# ------------------------------------------------------------------------


    - name: install longhorn prerequisites packages (open-iscsi nfs-common jq)
      command: sudo apt-get install open-iscsi nfs-common jq -y

    - name: Check if multipath.conf exists
      stat:
        path: /etc/multipath.conf
      register: multipath_conf_stat

    - name: Create multipath.conf if not exists and copy blacklist to avoid multipath on local disks
      copy:
        content: |
          blacklist {
              devnode "^sd[a-z0-9]+"
          }
        dest: /etc/multipath.conf
      when: not multipath_conf_stat.stat.exists
    - name: Restart multipath service
      systemd:
        name: multipathd.service
        state: restarted

    - name: Verify configuration is applied
      command: multipath -t
