- name: Configure Servers
  hosts: worker_nodes
  gather_facts: true
  become: true
  tasks:
    - name: Update package cache (Debian/Ubuntu)
      package:
        update_cache: true
      when: ansible_os_family == 'Debian'

    - name: Update package cache (Red Hat/CentOS)
      yum:
        update_cache: true
      when: ansible_os_family == 'RedHat'

    - name: Update package cache (openSUSE)
      zypper:
        name: openssl
        state: present
        update_cache: true
      when: ansible_os_family == "Suse"

    - name: installing curl and jq
      package:
        name: "{{ item }}"
        state: present
      loop:
        - curl
        - util-linux
        - grep

    - name: Install open-iscsi (Debian/Ubuntu)
      apt:
        name: open-iscsi
        state: present
      when: ansible_os_family == 'Debian'

    - name: Install iscsi-initiator-utils (Red Hat)
      yum:
        name: iscsi-initiator-utils
        state: present
        update_cache: true
      when: ansible_os_family == 'RedHat'

    - name: Create initiatorname.iscsi file (Red Hat)
      copy:
        content: "InitiatorName=$(/sbin/iscsi-iname)"
        dest: /etc/iscsi/initiatorname.iscsi
      when: ansible_os_family == 'RedHat'

    - name: Enable and start iscsid service (Red Hat)
      systemd:
        name: iscsid
        enabled: true
        state: started
      when: ansible_os_family == 'RedHat'

    - name: Install open-iscsi client (SUSE/OpenSUSE)
      zypper:
        name: open-iscsi
        state: present
      when: ansible_os_family ==  "Suse"

    - name: Install NFSv4 client (Debian/Ubuntu)
      apt:
        name: nfs-common
        state: present
      when: ansible_os_family == 'Debian'

    - name: Install NFSv4 client (Red Hat)
      yum:
        name: nfs-utils
        state: present
        update_cache: true
      when: ansible_os_family == 'RedHat'

    - name: Install NFSv4 client (SUSE/OpenSUSE)
      zypper:
        name: nfs-client
        state: present
      when: ansible_os_family ==  "Suse"

    - name: Check if multipath.conf exists
      stat:
        path: /etc/multipath.conf
      register: multipath_conf_stat

    - name: Create multipath.conf if not exists and copy blacklist to avoid multipath on local disks
      copy:
        content: |
          blacklist {
              devnode "^sd[a-z0-9]+"
          }
        dest: /etc/multipath.conf
      when: not multipath_conf_stat.stat.exists


    - name: Install multipathd on RHEL/CentOS if not installed
      yum:
        name: device-mapper-multipath
        state: present
      when: ansible_os_family == 'RedHat'

    - name: Install multipathd on Debian/Ubuntu if not installed
      apt:
        name: multipath-tools
        state: present
      when: ansible_os_family == 'Debian'

    - name: Restart multipath service
      systemd:
        name: multipathd.service
        state: restarted
      ignore_errors: true

    - name: Verify configuration is applied
      command: multipath -t
      ignore_errors: true
